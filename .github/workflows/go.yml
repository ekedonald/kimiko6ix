name: Build, Test, and Deploy for Development

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    environment: development
    env:
      TEST_USERNAME: postgres
      TEST_PASSWORD: password
      TEST_DB_NAME: db_name
      TEST_DB_HOST: localhost
      TEST_DB_PORT: 5432
      TEST_DB_CONNECTION: pgsql
      TEST_TIMEZONE: Africa/Lagos
      TEST_SSLMODE: disable
      TEST_MIGRATE: true
      REDIS_PORT: 6379
      REDIS_HOST: localhost
      REDIS_DB: 0

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ env.TEST_USERNAME }}
          POSTGRES_PASSWORD: ${{ env.TEST_PASSWORD }}
          POSTGRES_DB: ${{ env.TEST_DB_NAME }}
        ports:
          - 5432:5432
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Set Golang
        uses: actions/setup-go@v4
        with:
          go-version: "1.22.1"
      - name: Create app config file
        run: cp app-sample.env app.env
      - name: Build the application
        run: go build -o development_app
      - name: Run the application
        run: nohup ./development_app > /dev/null 2>&1 &
      - name: Wait for application to start
        run: |
          for i in {1..30}; do
            curl -s http://localhost:8019 && break
            sleep 1
          done
      - name: Run All Tests
        run: go test ./... -timeout 300s

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_test
    if: github.event_name == 'push'
    environment: development

    steps:
      - name: SSH into server and deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            export APPROOT=~/deployments/development
            mkdir -p $APPROOT
            cd $APPROOT

            if [ -d "$APPROOT/.git" ]; then
              # Navigate to the repository directory and pull changes
              cd $APPROOT || { echo "Failed to navigate to web root directory"; exit 1; }
              git reset --hard HEAD || { echo "Failed to reset local changes"; exit 1; }
              git pull origin dev || { echo "Failed to pull latest changes"; exit 1; }
            else
              git clone -b dev https://github.com/${{ github.repository}} . || { echo "Failed to clone repository"; exit 1; }
            fi

            bash ./scripts/deploy_app.sh development https://github.com/${{ github.repository}} \
              SERVER_PORT=${{ secrets.SERVER_PORT }} \
              DB_NAME=${{ secrets.DB_NAME }} \
              USERNAME=${{ secrets.USERNAME }} \
              APP_NAME="development" \
              APP_URL="https://deployment.api-golang.boilerplate.hng.tech" \
              REDIS_PORT=${{ secrets.REDIS_PORT }} \
              REDIS_HOST=${{ secrets.REDIS_HOST }} \
              REDIS_DB="0" \
              GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
              GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} \
              FACEBOOK_CLIENT_ID=${{ secrets.FACEBOOK_CLIENT_ID }} \
              FACEBOOK_CLIENT_SECRET=${{ secrets.FACEBOOK_CLIENT_SECRET }} \
              SESSION_SECRET=${{ secrets.SESSION_SECRET }} \
              MAIL_SERVER=${{ secrets.MAIL_SERVER }} \
              MAIL_USERNAME=${{ secrets.MAIL_USERNAME }} \
              MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }} \
              MAIL_PORT=${{ secrets.MAIL_PORT }} \
              MIGRATE=true